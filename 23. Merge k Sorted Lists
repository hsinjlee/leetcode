/*
23. Merge k Sorted Lists
Hard

Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution1 {
    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue <Integer> minHeap = new PriorityQueue<>();
        for (ListNode head: lists){
            while (head != null){
                minHeap.add(head.val);
                head = head.next;
            }
        }
        ListNode dummy = new ListNode(-1);
        ListNode head = dummy;
        while(!minHeap.isEmpty()){
            head.next = new ListNode (minHeap.remove());
            head = head.next;
        }
        return dummy.next;
    }
}

//Time: O(nlog(k))
//Space: O(k)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution2 {
    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue <ListNode > minHeap = new PriorityQueue((Comparator<ListNode>)
            ( o1,o2) -> o1.val - o2.val);
        for (ListNode head: lists){
            if (head != null){
                minHeap.offer(head);
            }
        }
        ListNode dummy = new ListNode(-1);
        ListNode newHead = dummy;
        while(!minHeap.isEmpty()){
            ListNode curr = minHeap.poll();
            newHead.next = new ListNode(curr.val);
            if (curr.next != null){
                minHeap.offer(curr.next);
            }
            newHead = newHead.next;
        }
        return dummy.next;
    }
}


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue <ListNode> p = new PriorityQueue<>((Comparator<ListNode>) (o1, o2) -> o1.val - o2.val);
        for (ListNode head : lists){
            while(head != null){
                p.add(head);
                head = head.next;
            }
        }
        ListNode dummy = new ListNode(0);
        ListNode head = dummy;
        while(!p.isEmpty()){
            ListNode curr = p.remove();
            head.next = new ListNode(curr.val);
            head = head.next;
        }
        return dummy.next;
    }
}
