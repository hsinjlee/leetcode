/*
7. Reverse Integer
Easy

Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321

Example 2:

Input: -123
Output: -321

Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [âˆ’231,  231 âˆ’ 1]. 
For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
*/

class Solution1 {
    public int reverse(int x) {
        int res = 0;
        while(x != 0){
            int lastDigit = x % 10;
            int newRes = res * 10 + lastDigit;
            if ((newRes - lastDigit) / 10 != res) {
                return 0;
            }
            x /= 10;
            res = newRes;
        }
        return res;
    }
}

class Solution2 {
    public int reverse(int x) {
        long res = 0;
        while(x != 0){
            res = (res * 10) + (x % 10);
            if (res > Integer.MAX_VALUE || res < Integer.MIN_VALUE){
                return 0;
            }
            x /= 10;
        }
        return (int) res;
    }
}

class Solution3 {
    public int reverse(int x) {
        boolean negative = false;
        if ( x < 0){
            negative = true;
            x *= -1;
        }
        long reverse = 0;
        while(x > 0){
            reverse = (reverse * 10) + (x % 10);
            x /= 10;
        }
        if ( reverse > Integer.MAX_VALUE){
            return 0;
        }
        return negative  ? (int)(-1* reverse) :(int)reverse;
    }
}
