/*
1046. Last Stone Weight
Easy

We have a collection of stones, each stone has a positive integer weight.

Each turn, we choose the two heaviest stones and smash them together.  Suppose the stones have weights x and y with x <= y.  
The result of this smash is:

If x == y, both stones are totally destroyed;
If x != y, the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x.
At the end, there is at most 1 stone left.  Return the weight of this stone (or 0 if there are no stones left.)

 

Example 1:

Input: [2,7,4,1,8,1]
Output: 1
Explanation: 
We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,
we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,
we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,
we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of last stone.
 

Note:

1 <= stones.length <= 30
1 <= stones[i] <= 1000
*/

class Solution1 {
    public int lastStoneWeight(int[] stones) {
        PriorityQueue<Integer> maxheap = new PriorityQueue<>((a,b)-> b - a);
        for (int i: stones){
            maxheap.add(i);
        }
        while(maxheap.size() > 1){
            int stoneOne = maxheap.remove();
            int stoneTwo = maxheap.remove();
            if (stoneOne == stoneTwo){
                stoneOne = 0;
                stoneTwo = 0;
            }  else {
                int remainingStone = stoneOne - stoneTwo;
                maxheap.add(remainingStone);
            }
        }
        return maxheap.isEmpty() ? 0 : maxheap.remove();
    }
}

//Time complexity O(nlog n)
//Space complexity O(n)

class Solution2 {
    public int lastStoneWeight(int[] stones) {
        PriorityQueue<Integer> maxheap = new PriorityQueue();
        for (int i : stones){
            maxheap.add(-i);
        }
        while(maxheap.size() > 1){
            int stoneOne = -maxheap.remove();
            int stoneTwo = -maxheap.remove();
            if (stoneOne != stoneTwo){
                maxheap.add(-(stoneOne - stoneTwo));
            }
        }
        return maxheap.isEmpty() ? 0 : -maxheap.remove();
    }
}

class Solution3 {
    public int lastStoneWeight(int[] stones) {
        PriorityQueue<Integer> maxheap = new PriorityQueue<>((a, b)-> b - a);
        for (int i : stones){
            maxheap.offer(i);
        }
        while(!maxheap.isEmpty()){
            if (maxheap.size() >= 2){
                maxheap.offer(maxheap.poll() - maxheap.poll());
            } else {
                return maxheap.poll();
            }
        }
        return -1;
    }
}
