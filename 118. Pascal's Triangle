118. Pascal's Triangle
Easy


Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]
 

Constraints:

1 <= numRows <= 30

// from right to left
class Solution1 {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> result = new ArrayList();
        List<Integer> row = new ArrayList();
        for (int i = 0; i < numRows; i++){
            row.add(0, 1);
            for (int j = 1; j < row.size() - 1; j++){
                row.set(j, row.get(j) + row.get(j+1));
            }
            result.add(new ArrayList(row));
        }
        return result;
    }
}

// for right to left
class Solution2 {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> result = new ArrayList();
        List<Integer> row = new ArrayList();
        for (int i = 0; i < numRows; i ++){
            for (int j = row.size() -1; j >= 1; j--){
                row.set(j, row.get(j) + row.get(j - 1));
            }
            row.add(1);
            result.add(new ArrayList(row));
        }
        return result;
    }    
}
