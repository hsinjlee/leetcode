/*
954. Array of Doubled Pairs
Medium

Given an array of integers A with even length, return true if and only if it is possible to reorder it such that A[2 * i + 1] = 2 * A[2 * i] for every 0 <= i < len(A) / 2.

 

Example 1:

Input: [3,1,3,6]
Output: false
Example 2:

Input: [2,1,2,6]
Output: false
Example 3:

Input: [4,-2,2,-4]
Output: true
Explanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].
Example 4:

Input: [1,2,4,16,8,4]
Output: false
 

Note:

0 <= A.length <= 30000
A.length is even
-100000 <= A[i] <= 100000
*/

class Solution {
    public boolean canReorderDoubled(int[] A) {
        Map<Integer, Integer> map = new HashMap();
        for (int i : A){
            map.put(i, map.getOrDefault(i, 0)+1);
        }
        Integer[] I = new Integer[A.length];
        for (int i = 0; i < A.length; i++){
            I[i] = A[i];
        }
        Arrays.sort(I, Comparator.comparingInt(Math::abs));
        for (int i : I){
            if (map.get(i) == 0){
                continue;
            }
            if (map.getOrDefault(i,0) <= 0){
                return false;
            }
            if (map.getOrDefault(2*i,0) <= 0){
                return false;
            }
            map.put(i, map.get(i) -1);
            map.put(2* i, map.get(2* i) -1);
            
        }
        return true;
    }
}
