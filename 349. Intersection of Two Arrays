349. Intersection of Two Arrays
Easy

Given two arrays, write a function to compute their intersection.

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]

Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Note:

Each element in the result must be unique.
The result can be in any order.

//Time: O(n+m) on average; worse O(n*m)
//Space O(n*m)
class Solution1 {
    public int[] intersection(int[] nums1, int[] nums2) {
        HashSet<Integer> set1 = new HashSet();
        for (int i: nums1){
            set1.add(i);
        }
        HashSet<Integer> set2 = new HashSet();
        for (int i: nums2){
            set2.add(i);
        }
        set2.retainAll(set1);
        int [] res = new int [set2.size()];
        int index = 0;
        for (int i : set2){
            res[index++] = i;
        }
        return res;
    }
}

//Time: O(n)
class Solution2 {
    public int[] intersection(int[] nums1, int[] nums2) {
        HashSet<Integer> set1 = new HashSet();
        for (int i: nums1){
            set1.add(i);
        }
        HashSet<Integer> intersect = new HashSet();
        for (int i: nums2){
            if (set1.contains(i)){
                intersect.add(i);
            }
            
        }
        int [] res = new int [intersect.size()];
        int index = 0;
        for (int i : intersect){
            res[index++] = i;
        }
        return res;
    }
}

//Time: O(n lg n)
class Solution3 {
    public int[] intersection(int[] nums1, int[] nums2) {
        Arrays.sort(nums1);
        HashSet<Integer> intersect = new HashSet();
        for (int num: nums2){
            if (find(num, nums1)){
                intersect.add(num);
            }
        }
        int [] res = new int [intersect.size()];
        int index = 0;
        for (int num: intersect){
            res[index++] = num;
        }
        return res;
    }
    private boolean find(int target , int [] nums){
        int left = 0;
        int right = nums.length -1;
        while (left <= right){
            int mid = left +(right - left) / 2;
            if (nums[mid] == target){
                return true;
            } else if (nums[mid] > target){
                right = mid -1;
            } else {
                left = mid + 1;
            }
        }
        return false;
    }
}

//Time: O(n lg n)
class Solution4 {
    public int[] intersection(int[] nums1, int[] nums2) {
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int i = 0;
        int j = 0;
        Set <Integer> intersect = new HashSet();
        while(i < nums1.length && j < nums2.length){
            if (nums1[i] == nums2[j]){
                intersect.add(nums2[j]);
                i++;
                j++;
            } else if (nums1[i] < nums2[j]){
                i++;
            } else {
                j++;
            }
        }
        int [] res = new int [intersect.size()];
        int index = 0;
        for (int num: intersect){
            res[index++] = num;
        }
        return res;
    }
}
